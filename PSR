#PSR 
* PHP 代码文件 必须 以 <?php 或 <?= 标签开始；
* 在UCS 编码中有一个叫做”ZERO WIDTH NO-BREAK SPACE“的字符，它的编码是FEFF,UCS规范建议我们在传输字节流前，先传输 字符”ZERO WIDTH NO-BREAK SPACE“。
 如果接收者收到FEFF，就表明这个字节流是大字节序的；如果收到FFFE，就表明这个字节流是小字节序的。 

## 1命名空间以及类 必须 符合 PSR 的自动加载规范 
* 全限定类名必须拥有一个顶级命名空间名称，也称为供应商命名空间（vendor namespace）。 
全限定名有绝对径的意思，比如一个文件file的存放路径
* 全限定类名可以有一个或者多个子命名空间名称。 
* 所有类名的引用必须区分大小写
* 在全限定的类名（一个「命名称空间前缀」）中，一个或多个前导命名空间和子命名空间组成的连续命名空间，不包括前导命名空间的分隔符，至少对应一个「根目录」。
「名称空间前缀」后面的相邻子命名空间与根目录下的目录名称相对应（且必须区分大小写），其中名称空间的分隔符表示目录分隔符。
最终的类名与以.php 结尾的文件名保持一致，这个文件的名字必须和最终的类名相匹配（意思就是如果类名是 FooController，那么这个类所在的文件名必须是 FooController.php）。
自动加载文件禁止抛出异常，禁止出现任何级别的错误，也不建议有返回值。 
### HP 代码中 应该 只定义类、函数、常量等声明，或其他会产生 副作用 的操作（如：生成文件输出以及修改 .ini 配置文件等），二者只能选其一；  
* 副作用」包含却不仅限于：
* 生成输出
* 直接的 require 或 include
* 连接外部服务
* 修改 ini 配置
* 抛出错误或异常
* 修改全局或静态变量
* 读或写文件等 
### 常量 
*类的常量中所有字母都 必须 大写，词间以下划线分隔。 
### 属性
类的属性命名 可以 遵循：
* 大写开头的驼峰式 ($StudlyCaps)
* 小写开头的驼峰式 ($camelCase)
* 下划线分隔式 ($under_score)
* 本规范不做强制要求，但无论遵循哪种命名方式，都 应该 在一定的范围内保持一致。这个范围可以是整个团队、整个包、整个类或整个方法。
### 方法
* 方法名称 必须 符合 camelCase() 式的小写开头驼峰命名规范。  
##2 文件
* 所有 PHP 文件 必须 使用 Unix LF (linefeed) 作为行的结束符。
* 所有 PHP 文件 必须 以一个空白行作为结束。
*  PHP 代码文件 必须 省略最后的 ?> 结束标签。 
### 行
* 软性的长度约束 必须 要限制在 120 个字符以内，若超过此长度，带代码规范检查的编辑器 必须 要发出警告，不过 一定不可 发出错误提示。
* 每行 不该 多于 80 个字符，大于 80 字符的行 应该 折成多行。
* 非空行后 一定不可 有多余的空格符。
* 空行 可以 使得阅读代码更加方便以及有助于代码的分块。
* 每行 一定不可 存在多于一条语句。 
### 缩进
* 代码 必须 使用 4 个空格符的缩进，一定不可 用 tab 键。 
###namespace 以及 use 声明
* namespace 声明后 必须 插入一个空白行。
* 所有 use 必须 在 namespace 后声明。
* 每条 use 声明语句 必须 只有一个 use 关键词。
* use 声明语句块后 必须 要有一个空白行。 
###扩展与继承 
* 关键词 extends 和 implements 必须 写在类名称的同一行。
* 类的开始花括号 必须 独占一行，结束花括号也 必须 在类主体后独占一行 
* implements 的继承列表也 可以 分成多行，这样的话，每个继承接口名称都 必须 分开独立成行，包括第一个。
* 每个属性都 必须 添加访问修饰符 
``` 
<?php
namespace Vendor\Package;

class ClassName
{
    public $foo = null;
} 
``` 
###3. 方法
* 所有方法都 必须 添加访问修饰符。
* 不该 使用下划线作为前缀，来区分方法是 protected 或 private。
* 方法名称后 一定不可 有空格符，其开始花括号 必须 独占一行，结束花括号也 必须 在方法主体后单独成一行。参数左括号后和右括号前 一定不可 有空格。 
``` 
<?php
namespace Vendor\Package;

class ClassName
{
    public function fooBarBaz($arg1, &$arg2, $arg3 = [])
    {
        // method body
    }
} 
``` 
###4.4. 方法的参数
* 参数列表中，每个逗号后面 必须 要有一个空格，而逗号前面 一定不可 有空格。
* 有默认值的参数，必须 放到参数列表的末尾。 
``` 
<?php
namespace Vendor\Package;

class ClassName
{
    public function foo($arg1, &$arg2, $arg3 = [])
    {
        // method body
    }
} 
``` 
*参数列表 可以 分列成多行，这样，包括第一个参数在内的每个参数都 必须 单独成行。
* 拆分成多行的参数列表后，结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔。 
* *** 
* 需要添加 abstract 或 final 声明时，必须 写在访问修饰符前，而 static 则 必须 写在其后。 
``` 
<?php
namespace Vendor\Package;

abstract class ClassName
{
    protected static $foo;

    abstract protected function zim();

    final public static function bar()
    {
        // method body
    }
} 
``` 
###方法及函数调用 
* 方法及函数调用时，方法名或函数名与参数左括号之间 一定不可 有空格，参数右括号前也 一定不可 有空格。每个参数前 一定不可 有空格，但其后 必须 有一个空格。 
* 参数 可以 分列成多行，此时包括第一个参数在内的每个参数都 必须 单独成行。 
### 控制结构 
* 控制结构关键词后 必须 有一个空格。
* 左括号 ( 后 一定不可 有空格。
* 右括号 ) 前也 一定不可 有空格。
* 右括号 ) 与开始花括号 { 间 必须 有一个空格。
* 结构体主体 必须 要有一次缩进。
* 结束花括号 } 必须 在结构体主体后单独成行。
* 每个结构体的主体都 必须 被包含在成对的花括号之中，
* 这能让结构体更加结构化，以及减少加入新行时，出错的可能性。 
###if 、elseif 和 else 
* 标准的 if 结构如下代码所示，请留意「括号」、「空格」以及「花括号」的位置，
注意 else 和 elseif 都与前面的结束花括号在同一行。 
``` 
<?php
if ($expr1) {
    // if body
} elseif ($expr2) {
    // elseif body
} else {
    // else body;
} 
``` 
* 应该 使用关键词 elseif 代替所有 else if ，以使得所有的控制关键字都像是单独的一个词。 
###switch 和 case
* 标准的 switch 结构如下代码所示，留意括号、空格以及花括号的位置。
* case 语句 必须 相对 switch 进行一次缩进，而 break 语句以及 case 内的其它语句都 必须 相对 case * * 进行一次缩进。

如果存在非空的 case 直穿语句，主体里 必须 有类似 // no break 的注释。
